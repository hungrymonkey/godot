// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/talkingtree/TalkingTree.proto

#ifndef PROTOBUF_modules_2ftalkingtree_2fTalkingTree_2eproto__INCLUDED
#define PROTOBUF_modules_2ftalkingtree_2fTalkingTree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace TalkingTreeProto {
class TextMessage;
class TextMessageDefaultTypeInternal;
extern TextMessageDefaultTypeInternal _TextMessage_default_instance_;
}  // namespace TalkingTreeProto

namespace TalkingTreeProto {

namespace protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto

// ===================================================================

class TextMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TalkingTreeProto.TextMessage) */ {
 public:
  TextMessage();
  virtual ~TextMessage();

  TextMessage(const TextMessage& from);

  inline TextMessage& operator=(const TextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextMessage(TextMessage&& from) noexcept
    : TextMessage() {
    *this = ::std::move(from);
  }

  inline TextMessage& operator=(TextMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TextMessage& default_instance();

  static inline const TextMessage* internal_default_instance() {
    return reinterpret_cast<const TextMessage*>(
               &_TextMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TextMessage* other);
  friend void swap(TextMessage& a, TextMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TextMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextMessage& from);
  void MergeFrom(const TextMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 session = 2;
  int session_size() const;
  void clear_session();
  static const int kSessionFieldNumber = 2;
  ::google::protobuf::uint32 session(int index) const;
  void set_session(int index, ::google::protobuf::uint32 value);
  void add_session(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      session() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_session();

  // repeated uint32 channel_id = 3;
  int channel_id_size() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  ::google::protobuf::uint32 channel_id(int index) const;
  void set_channel_id(int index, ::google::protobuf::uint32 value);
  void add_channel_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channel_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channel_id();

  // repeated uint32 tree_id = 4;
  int tree_id_size() const;
  void clear_tree_id();
  static const int kTreeIdFieldNumber = 4;
  ::google::protobuf::uint32 tree_id(int index) const;
  void set_tree_id(int index, ::google::protobuf::uint32 value);
  void add_tree_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tree_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tree_id();

  // required string message = 5;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional uint32 actor = 1;
  bool has_actor() const;
  void clear_actor();
  static const int kActorFieldNumber = 1;
  ::google::protobuf::uint32 actor() const;
  void set_actor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TalkingTreeProto.TextMessage)
 private:
  void set_has_actor();
  void clear_has_actor();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > session_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channel_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tree_id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint32 actor_;
  friend struct protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextMessage

// optional uint32 actor = 1;
inline bool TextMessage::has_actor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TextMessage::set_has_actor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TextMessage::clear_has_actor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TextMessage::clear_actor() {
  actor_ = 0u;
  clear_has_actor();
}
inline ::google::protobuf::uint32 TextMessage::actor() const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.actor)
  return actor_;
}
inline void TextMessage::set_actor(::google::protobuf::uint32 value) {
  set_has_actor();
  actor_ = value;
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.actor)
}

// repeated uint32 session = 2;
inline int TextMessage::session_size() const {
  return session_.size();
}
inline void TextMessage::clear_session() {
  session_.Clear();
}
inline ::google::protobuf::uint32 TextMessage::session(int index) const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.session)
  return session_.Get(index);
}
inline void TextMessage::set_session(int index, ::google::protobuf::uint32 value) {
  session_.Set(index, value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.session)
}
inline void TextMessage::add_session(::google::protobuf::uint32 value) {
  session_.Add(value);
  // @@protoc_insertion_point(field_add:TalkingTreeProto.TextMessage.session)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::session() const {
  // @@protoc_insertion_point(field_list:TalkingTreeProto.TextMessage.session)
  return session_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_session() {
  // @@protoc_insertion_point(field_mutable_list:TalkingTreeProto.TextMessage.session)
  return &session_;
}

// repeated uint32 channel_id = 3;
inline int TextMessage::channel_id_size() const {
  return channel_id_.size();
}
inline void TextMessage::clear_channel_id() {
  channel_id_.Clear();
}
inline ::google::protobuf::uint32 TextMessage::channel_id(int index) const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.channel_id)
  return channel_id_.Get(index);
}
inline void TextMessage::set_channel_id(int index, ::google::protobuf::uint32 value) {
  channel_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.channel_id)
}
inline void TextMessage::add_channel_id(::google::protobuf::uint32 value) {
  channel_id_.Add(value);
  // @@protoc_insertion_point(field_add:TalkingTreeProto.TextMessage.channel_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::channel_id() const {
  // @@protoc_insertion_point(field_list:TalkingTreeProto.TextMessage.channel_id)
  return channel_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable_list:TalkingTreeProto.TextMessage.channel_id)
  return &channel_id_;
}

// repeated uint32 tree_id = 4;
inline int TextMessage::tree_id_size() const {
  return tree_id_.size();
}
inline void TextMessage::clear_tree_id() {
  tree_id_.Clear();
}
inline ::google::protobuf::uint32 TextMessage::tree_id(int index) const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.tree_id)
  return tree_id_.Get(index);
}
inline void TextMessage::set_tree_id(int index, ::google::protobuf::uint32 value) {
  tree_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.tree_id)
}
inline void TextMessage::add_tree_id(::google::protobuf::uint32 value) {
  tree_id_.Add(value);
  // @@protoc_insertion_point(field_add:TalkingTreeProto.TextMessage.tree_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::tree_id() const {
  // @@protoc_insertion_point(field_list:TalkingTreeProto.TextMessage.tree_id)
  return tree_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_tree_id() {
  // @@protoc_insertion_point(field_mutable_list:TalkingTreeProto.TextMessage.tree_id)
  return &tree_id_;
}

// required string message = 5;
inline bool TextMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& TextMessage::message() const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.message)
  return message_.GetNoArena();
}
inline void TextMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.message)
}
#if LANG_CXX11
inline void TextMessage::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TalkingTreeProto.TextMessage.message)
}
#endif
inline void TextMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TalkingTreeProto.TextMessage.message)
}
inline void TextMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TalkingTreeProto.TextMessage.message)
}
inline ::std::string* TextMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:TalkingTreeProto.TextMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextMessage::release_message() {
  // @@protoc_insertion_point(field_release:TalkingTreeProto.TextMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TalkingTreeProto.TextMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace TalkingTreeProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2ftalkingtree_2fTalkingTree_2eproto__INCLUDED
