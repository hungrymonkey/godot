// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/talkingtree/TalkingTree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/talkingtree/TalkingTree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TalkingTreeProto {
class TextMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TextMessage>
     _instance;
} _TextMessage_default_instance_;

namespace protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, tree_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, message_),
  1,
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(TextMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/talkingtree/TalkingTree.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TextMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TextMessage_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%modules/talkingtree/TalkingTree.proto\022"
      "\020TalkingTreeProto\"c\n\013TextMessage\022\r\n\005acto"
      "r\030\001 \001(\r\022\017\n\007session\030\002 \003(\r\022\022\n\nchannel_id\030\003"
      " \003(\r\022\017\n\007tree_id\030\004 \003(\r\022\017\n\007message\030\005 \002(\tB\002"
      "H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/talkingtree/TalkingTree.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMessage::kActorFieldNumber;
const int TextMessage::kSessionFieldNumber;
const int TextMessage::kChannelIdFieldNumber;
const int TextMessage::kTreeIdFieldNumber;
const int TextMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMessage::TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TalkingTreeProto.TextMessage)
}
TextMessage::TextMessage(const TextMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      session_(from.session_),
      channel_id_(from.channel_id_),
      tree_id_(from.tree_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  actor_ = from.actor_;
  // @@protoc_insertion_point(copy_constructor:TalkingTreeProto.TextMessage)
}

void TextMessage::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actor_ = 0u;
}

TextMessage::~TextMessage() {
  // @@protoc_insertion_point(destructor:TalkingTreeProto.TextMessage)
  SharedDtor();
}

void TextMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMessage::descriptor() {
  protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextMessage& TextMessage::default_instance() {
  protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextMessage* TextMessage::New(::google::protobuf::Arena* arena) const {
  TextMessage* n = new TextMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TalkingTreeProto.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.Clear();
  channel_id_.Clear();
  tree_id_.Clear();
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  actor_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TalkingTreeProto.TextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 actor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_actor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_session())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_session())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_channel_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tree_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_tree_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tree_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TalkingTreeProto.TextMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TalkingTreeProto.TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TalkingTreeProto.TextMessage)
  return false;
#undef DO_
}

void TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TalkingTreeProto.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 actor = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actor(), output);
  }

  // repeated uint32 session = 2;
  for (int i = 0, n = this->session_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->session(i), output);
  }

  // repeated uint32 channel_id = 3;
  for (int i = 0, n = this->channel_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channel_id(i), output);
  }

  // repeated uint32 tree_id = 4;
  for (int i = 0, n = this->tree_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->tree_id(i), output);
  }

  // required string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TalkingTreeProto.TextMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TalkingTreeProto.TextMessage)
}

::google::protobuf::uint8* TextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TalkingTreeProto.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 actor = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actor(), target);
  }

  // repeated uint32 session = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->session_, target);

  // repeated uint32 channel_id = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->channel_id_, target);

  // repeated uint32 tree_id = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->tree_id_, target);

  // required string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TalkingTreeProto.TextMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalkingTreeProto.TextMessage)
  return target;
}

size_t TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TalkingTreeProto.TextMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string message = 5;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  // repeated uint32 session = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->session_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->session_size());
    total_size += data_size;
  }

  // repeated uint32 channel_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channel_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->channel_id_size());
    total_size += data_size;
  }

  // repeated uint32 tree_id = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tree_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tree_id_size());
    total_size += data_size;
  }

  // optional uint32 actor = 1;
  if (has_actor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TalkingTreeProto.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TextMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TalkingTreeProto.TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TalkingTreeProto.TextMessage)
    MergeFrom(*source);
  }
}

void TextMessage::MergeFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TalkingTreeProto.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_.MergeFrom(from.session_);
  channel_id_.MergeFrom(from.channel_id_);
  tree_id_.MergeFrom(from.tree_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      actor_ = from.actor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TalkingTreeProto.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessage::CopyFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TalkingTreeProto.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TextMessage::Swap(TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMessage::InternalSwap(TextMessage* other) {
  using std::swap;
  session_.InternalSwap(&other->session_);
  channel_id_.InternalSwap(&other->channel_id_);
  tree_id_.InternalSwap(&other->tree_id_);
  message_.Swap(&other->message_);
  swap(actor_, other->actor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextMessage::GetMetadata() const {
  protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2ftalkingtree_2fTalkingTree_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextMessage

// optional uint32 actor = 1;
bool TextMessage::has_actor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TextMessage::set_has_actor() {
  _has_bits_[0] |= 0x00000002u;
}
void TextMessage::clear_has_actor() {
  _has_bits_[0] &= ~0x00000002u;
}
void TextMessage::clear_actor() {
  actor_ = 0u;
  clear_has_actor();
}
::google::protobuf::uint32 TextMessage::actor() const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.actor)
  return actor_;
}
void TextMessage::set_actor(::google::protobuf::uint32 value) {
  set_has_actor();
  actor_ = value;
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.actor)
}

// repeated uint32 session = 2;
int TextMessage::session_size() const {
  return session_.size();
}
void TextMessage::clear_session() {
  session_.Clear();
}
::google::protobuf::uint32 TextMessage::session(int index) const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.session)
  return session_.Get(index);
}
void TextMessage::set_session(int index, ::google::protobuf::uint32 value) {
  session_.Set(index, value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.session)
}
void TextMessage::add_session(::google::protobuf::uint32 value) {
  session_.Add(value);
  // @@protoc_insertion_point(field_add:TalkingTreeProto.TextMessage.session)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::session() const {
  // @@protoc_insertion_point(field_list:TalkingTreeProto.TextMessage.session)
  return session_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_session() {
  // @@protoc_insertion_point(field_mutable_list:TalkingTreeProto.TextMessage.session)
  return &session_;
}

// repeated uint32 channel_id = 3;
int TextMessage::channel_id_size() const {
  return channel_id_.size();
}
void TextMessage::clear_channel_id() {
  channel_id_.Clear();
}
::google::protobuf::uint32 TextMessage::channel_id(int index) const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.channel_id)
  return channel_id_.Get(index);
}
void TextMessage::set_channel_id(int index, ::google::protobuf::uint32 value) {
  channel_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.channel_id)
}
void TextMessage::add_channel_id(::google::protobuf::uint32 value) {
  channel_id_.Add(value);
  // @@protoc_insertion_point(field_add:TalkingTreeProto.TextMessage.channel_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::channel_id() const {
  // @@protoc_insertion_point(field_list:TalkingTreeProto.TextMessage.channel_id)
  return channel_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable_list:TalkingTreeProto.TextMessage.channel_id)
  return &channel_id_;
}

// repeated uint32 tree_id = 4;
int TextMessage::tree_id_size() const {
  return tree_id_.size();
}
void TextMessage::clear_tree_id() {
  tree_id_.Clear();
}
::google::protobuf::uint32 TextMessage::tree_id(int index) const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.tree_id)
  return tree_id_.Get(index);
}
void TextMessage::set_tree_id(int index, ::google::protobuf::uint32 value) {
  tree_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.tree_id)
}
void TextMessage::add_tree_id(::google::protobuf::uint32 value) {
  tree_id_.Add(value);
  // @@protoc_insertion_point(field_add:TalkingTreeProto.TextMessage.tree_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TextMessage::tree_id() const {
  // @@protoc_insertion_point(field_list:TalkingTreeProto.TextMessage.tree_id)
  return tree_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TextMessage::mutable_tree_id() {
  // @@protoc_insertion_point(field_mutable_list:TalkingTreeProto.TextMessage.tree_id)
  return &tree_id_;
}

// required string message = 5;
bool TextMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TextMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void TextMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void TextMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& TextMessage::message() const {
  // @@protoc_insertion_point(field_get:TalkingTreeProto.TextMessage.message)
  return message_.GetNoArena();
}
void TextMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TalkingTreeProto.TextMessage.message)
}
#if LANG_CXX11
void TextMessage::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TalkingTreeProto.TextMessage.message)
}
#endif
void TextMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TalkingTreeProto.TextMessage.message)
}
void TextMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TalkingTreeProto.TextMessage.message)
}
::std::string* TextMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:TalkingTreeProto.TextMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextMessage::release_message() {
  // @@protoc_insertion_point(field_release:TalkingTreeProto.TextMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TalkingTreeProto.TextMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace TalkingTreeProto

// @@protoc_insertion_point(global_scope)
